options
{
    LOOKAHEAD=1;
    NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(Jmm)
import java.util.*;
import pt.up.fe.comp.jmm.report.*;
public class Jmm {
    List<Report> reports = new ArrayList<Report>();
    List<Report> getReports(){
        return reports;
    }

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).put("line", Integer.toString(getToken(1).beginLine));
        ((SimpleNode)n).put("column", Integer.toString(getToken(1).beginColumn));
    }

    void jjtreeCloseNodeScope(Node n) {
    }
}
PARSER_END(Jmm)

JAVACODE
void while_error_recovery() {
  Token t;
  Token next = getToken(1);

  if (next.kind == OpenBlock) {
    return;
  }

  while (true){
    t = getNextToken();
    next = getToken(1);

    if(
      next.kind == OpenBlock
    | next.kind == 0
    | (t.kind == CloseParenthesis && next.kind != CloseParenthesis)
    ) break;
  }
}

SKIP :
{
      " "
    | "\t"
    | "\r"
    | "\n"
}

/////////////////////////////////////////////////////////////////////////////
// From the JavaCC FAQ https://javacc.github.io/javacc/faq.html#question-3.14
/////////////////////////////////////////////////////////////////////////////

// when /* is seen in the DEFAULT state, skip it and switch to the IN_COMMENT state
MORE : {
  "/*": IN_COMMENT
  | "//": IN_SINGLE_LINE_COMMENT
}

// when any other character is seen in the IN_COMMENT state, skip it.
< IN_COMMENT > MORE : {
  < ~[] >
}

// when */ is seen in the IN_COMMENT state, skip it and switch back to the DEFAULT state
< IN_COMMENT > SKIP : {
  "*/": DEFAULT
}

< IN_SINGLE_LINE_COMMENT > SPECIAL_TOKEN : {
  < SINGLE_LINE_COMMENT: "\n"|"\r"|"\r\n" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT > MORE : {
  < ~[] >
}

TOKEN :
{

    <IntegerLiteral: <Digit> (<Digit>)*>
    | <Digit: ["0" - "9"] >

    | <OpenBlock: "{" >
    | <CloseBlock: "}" >
    | <OpenParenthesis: "(" >
    | <CloseParenthesis: ")" >
    | <OpenArray: "[" >
    | <CloseArray: "]" >
    | <Semicolon: ";" >
    | <Comma: "," >
    | <Equals: "=" >
    | <Dot: "." >

    | <Class: "class" >
    | <Import: "import" >
    | <If: "if" >
    | <Else: "else" >
    | <While: "while" >
    | <TypeInt: "int" >
    | <TypeBoolean: "boolean" >
    | <TypeString: "String" >
    | <Extends: "extends" >
    | <Public: "public" >
    | <Static: "static" >
    | <Void: "void" >
    | <Main: "main" >
    | <Return: "return" >
    | <Length: "length" >
    | <True: "true" >
    | <False: "false" >
    | <This: "this" >
    | <New: "new" >

    | <AndOp: "&&" >
    | <LessThanOp: "<" >
    | <AddOp: "+" >
    | <SubOp: "-" >
    | <MultOp: "*" >
    | <DivOp: "/" >
    | <NotOp: "!" >
    | <Print: "System.out.println">

    | <Identifier: (<Letter> | <DollarSign> | <Underscore> ) (<Letter> | <DollarSign> | <Underscore> | <Digit>)* >
    | <Letter: (<LowerCase> | <UpperCase>) >
    | <LowerCase: ["a"-"z"] >
    | <UpperCase: ["A"-"Z"] >
    | <DollarSign: "$" >
    | <Underscore: "_" >
}

SimpleNode Program(): {} {
    try{
        (ImportDeclaration())*
        ClassDeclaration()
        <EOF>
    }
    catch(ParseException e){
        reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, token.beginLine, token.beginColumn, e.getMessage()));
    }
    { return jjtThis; }
}

void ImportDeclaration(): { Token t_name; } {
    <Import> t_name = <Identifier> { jjtThis.put("name", t_name.image); jjtThis.put("type", t_name.image); } (ImportDeclarationPackage())* <Semicolon>
}

void ImportDeclarationPackage(): { Token t_name; } {
    <Dot> t_name = <Identifier> { jjtThis.put("name", t_name.image); }
}

void ClassDeclaration(): { Token t_name; } {
    <Class> t_name = <Identifier> { jjtThis.put("name", t_name.image); jjtThis.put("type", t_name.image); } [ClassInheritance()]
    <OpenBlock>
        (VarDeclaration() #Field)*
        (MethodDeclaration())*
    <CloseBlock>
}

void ClassInheritance(): { Token t_type; } {
    <Extends> t_type = <Identifier> { jjtThis.put("type", t_type.image); }
}

void VarDeclaration(): { Token t_name; } {
    Type() t_name = <Identifier> { jjtThis.put("name", t_name.image); } <Semicolon>
}

void MethodDeclaration(): { Token t_name; } {
    <Public>
    (
    Type() [<Static> { jjtThis.put("static", "true"); } ] t_name = <Identifier> { jjtThis.put("name", t_name.image); }
    <OpenParenthesis>
        Parameters()
    <CloseParenthesis>
    <OpenBlock>
        (LOOKAHEAD(2) VarDeclaration() | Statement())* // Allowed for now
        Return()
    <CloseBlock>
    |
    <Static> <Void> t_name = <Main> { jjtThis.put("name", t_name.image); jjtThis.put("static", "true"); } <OpenParenthesis> <TypeString> <OpenArray> <CloseArray>
    <Identifier> <CloseParenthesis> <OpenBlock>
        (LOOKAHEAD(2) VarDeclaration() | Statement())* // Allowed for now
    <CloseBlock>
    )
}

void Parameters() #void: {} {
    [Parameter() (<Comma> Parameter())* ]
}

void Parameter(): { Token t_name; } {
    Type() t_name = <Identifier> { jjtThis.put("name", t_name.image); }
}

void Type(): { Token t_type; } {
    (t_type = <TypeInt> { jjtThis.put("type", t_type.image); } [<OpenArray> <CloseArray> { jjtThis.put("type", "intArray"); }])
    | (t_type = <TypeBoolean>
    | t_type = <Identifier>
    ) { jjtThis.put("type", t_type.image); }
}

void Statement() #void: {} {
    (<OpenBlock> (Statement())* <CloseBlock> )
    | (<If> <OpenParenthesis> Expression() #IfCondition <CloseParenthesis> Statement() <Else> Statement() #Else) #IfStatement
    | WhileStatement()
    | (<Print> <OpenParenthesis> Expression() <CloseParenthesis> <Semicolon> ) #PrintStatement
    | (Expression() [Assignment()] <Semicolon>)
}

void WhileStatement(): {} {
    <While> <OpenParenthesis>
    try{
        (Expression() #WhileCondition <CloseParenthesis>)
    }
    catch(ParseException e){
        reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, token.beginLine, e.getMessage()));
        while_error_recovery();
    }

    Statement() #WhileBody
}

void Assignment() #void: {} {
    <Equals> Expression() #Assignment(2)
}

void Return(): {} {
    <Return> Expression() <Semicolon>
}

void Expression() #void: {} {
    And()
}

void And() #void: {} {
    LessThan() ((<AndOp> LessThan() { jjtThis.put("value", "&&"); } ) #Binary(2) )*
}

void LessThan() #void: {} {
    AddSub() ((<LessThanOp> AddSub() { jjtThis.put("value", "<"); } ) #Binary(2) )*
}

void AddSub() #void: {} {
    MultDiv() (
        (<AddOp> MultDiv() { jjtThis.put("value", "+"); } ) #Binary(2)
        | (<SubOp> MultDiv() { jjtThis.put("value", "-"); } )  #Binary(2) )*
}


void MultDiv() #void: {} {
    Not() (
        (<MultOp> Not() { jjtThis.put("value", "*"); } )  #Binary(2)
        |(<DivOp> Not() { jjtThis.put("value", "/"); } )  #Binary(2) )*
}

void Not() #void: {} {
    (<NotOp> (Not() { jjtThis.put("value", "!"); }) #NotExpression) | Terminations()
}

void Terminations() #void: {} {
    Terminal() (Array() | DotStatement())*
}

void Array() #void: {} {
    <OpenArray> Expression() <CloseArray> #ArrayExpression(2)
}

void DotStatement() #void: { Token t_name; } {
    <Dot>
    (
      (t_name = <Length> { jjtThis.put("value", t_name.image); jjtThis.put("type", "int"); } #PropertyAccess(1))
    | CallExpression()
    )
}

void CallExpression() #CallExpression(2) :{Token t_name;}{
    t_name = <Identifier> { jjtThis.put("name", t_name.image); }
            <OpenParenthesis> ([Expression() (<Comma> Expression())*]#ArgsList) <CloseParenthesis>
}

void Terminal() #void : { Token t_value; } {
    ( t_value = <IntegerLiteral> { jjtThis.put("value", t_value.image); jjtThis.put("type", "int"); } ) #Literal
    | ( t_value = <True> { jjtThis.put("value", t_value.image); jjtThis.put("type", "boolean"); } ) #Literal
    | ( t_value = <False> { jjtThis.put("value", t_value.image); jjtThis.put("type", "boolean"); } ) #Literal
    | ( t_value = <Identifier> { jjtThis.put("value", t_value.image); jjtThis.put("type", "identifier"); } ) #Terminal
    | ( t_value = <This> { jjtThis.put("value", t_value.image); jjtThis.put("type", "class"); } ) #Terminal
    | (<OpenParenthesis> Expression() <CloseParenthesis> )
    | New()
}

void New() : { Token t_type; } {
    <New>
    (
    ( <TypeInt> <OpenArray> Expression() <CloseArray>  { jjtThis.put("type", "intArray"); })
    | ( t_type = <Identifier> { jjtThis.put("type", t_type.image); } <OpenParenthesis> <CloseParenthesis> )
    )
}